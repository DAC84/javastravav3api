package javastrava.service.impl.activityservice;

import static org.junit.Assert.fail;
import static org.junit.Assume.assumeFalse;
import static org.junit.Assume.assumeTrue;

import org.junit.Test;

import javastrava.config.JavastravaApplicationConfig;
import javastrava.model.StravaComment;
import javastrava.service.exception.NotFoundException;
import javastrava.service.exception.UnauthorizedException;
import api.issues.strava.Issue172;
import javastrava.service.standardtests.CreateMethodTest;
import javastrava.service.standardtests.callbacks.CreateCallback;
import javastrava.service.standardtests.callbacks.DeleteCallback;
import javastrava.service.standardtests.callbacks.GetCallback;
import javastrava.service.standardtests.data.ActivityDataUtils;
import javastrava.service.standardtests.data.CommentDataUtils;
import javastrava.utils.RateLimitedTestRunner;
import javastrava.utils.TestUtils;

/**
 * <p>
 * Tests for methods which allow creation of comments
 * </p>
 *
 * @author Dan Shannon
 *
 */
public class CreateCommentTest extends CreateMethodTest<StravaComment, Integer> {
	@Override
	protected CreateCallback<StravaComment> creator() {
		return CommentDataUtils.stravaCreator();
	}

	@Override
	protected DeleteCallback<StravaComment> deleter() {
		return CommentDataUtils.deleter();
	}

	@Override
	protected StravaComment generateInvalidObject() {
		return CommentDataUtils.generateInvalidObject();
	}

	@Override
	protected StravaComment generateValidObject() {
		return CommentDataUtils.generateValidObject();
	}

	@Override
	protected GetCallback<StravaComment, Integer> getter() {
		return CommentDataUtils.getter();
	}

	@Override
	@Test
	public void testCreateInvalidObject() throws Exception {
		// Can't run the test if we don't have Strava's permission to write comments
		assumeTrue(JavastravaApplicationConfig.STRAVA_ALLOWS_COMMENTS_WRITE);

		super.testCreateInvalidObject();
	}

	@Override
	@Test
	public void testCreateNonExistentParent() throws Exception {
		// Can't run the test if we don't have Strava's permission to write comments
		assumeTrue(JavastravaApplicationConfig.STRAVA_ALLOWS_COMMENTS_WRITE);

		RateLimitedTestRunner.run(() -> {
			// Create a comment
			final StravaComment comment = generateValidObject();
			comment.setActivityId(ActivityDataUtils.ACTIVITY_INVALID);

			// Add to Strava
			final StravaComment createdComment;
			try {
				createdComment = creator().create(TestUtils.stravaWithFullAccess(), comment);
			} catch (final NotFoundException e) {
				// Expected
				return;
			}

			// Delete it again and fail
			deleter().delete(TestUtils.stravaWithFullAccess(), createdComment);
			fail("Created a comment against a non-existent parent activity!"); //$NON-NLS-1$
		});
	}

	@Override
	public void testCreateNoWriteAccess() throws Exception {
		// Can't run the test if we don't have Strava's permission to write comments
		assumeTrue(JavastravaApplicationConfig.STRAVA_ALLOWS_COMMENTS_WRITE);

		super.testCreateNoWriteAccess();
	}

	@Override
	@Test
	public void testCreateValidObject() throws Exception {
		// Can't run the test if we don't have Strava's permission to write comments
		assumeTrue(JavastravaApplicationConfig.STRAVA_ALLOWS_COMMENTS_WRITE);

		RateLimitedTestRunner.run(() -> {
			// Create a comment
			final StravaComment comment = generateValidObject();

			// Add to Strava
			final StravaComment createdComment = creator().create(TestUtils.stravaWithFullAccess(), comment);

			// Validate
			CommentDataUtils.validateComment(createdComment);

			// Delete it again
			deleter().delete(TestUtils.stravaWithFullAccess(), createdComment);
		});
	}

	@Override
	@Test
	public void testInvalidId() throws Exception {
		// Not relevant for create methods - you don't specify the id, it's generated by Strava
		return;

	}

	@Override
	@Test
	public void testPrivateBelongsToOtherUser() throws Exception {
		// Can't run the test if we don't have Strava's permission to write comments
		assumeTrue(JavastravaApplicationConfig.STRAVA_ALLOWS_COMMENTS_WRITE);

		RateLimitedTestRunner.run(() -> {
			final StravaComment comment = generateValidObject();
			comment.setActivityId(ActivityDataUtils.ACTIVITY_PRIVATE_OTHER_USER);

			// Attempt to make the comment
			final StravaComment createdComment;
			try {
				createdComment = creator().create(TestUtils.stravaWithFullAccess(), comment);
			} catch (final UnauthorizedException e) {
				// Expected
				return;
			}

			// Delete it again and fail
			deleter().delete(TestUtils.stravaWithFullAccess(), createdComment);
			fail("Created a comment against a private activity belongoing to another user!"); //$NON-NLS-1$
		});
	}

	@Override
	@Test
	public void testPrivateWithNoViewPrivateScope() throws Exception {
		// Can't run the test if we don't have Strava's permission to write comments
		assumeTrue(JavastravaApplicationConfig.STRAVA_ALLOWS_COMMENTS_WRITE);

		assumeFalse(Issue172.issue());

		RateLimitedTestRunner.run(() -> {
			// Create a comment
			final StravaComment comment = generateValidObject();

			// Add to Strava
			final StravaComment createdComment;
			try {
				createdComment = creator().create(TestUtils.stravaWithWriteAccess(), comment);
			} catch (final UnauthorizedException e) {
				// Expected
				return;
			}

			// Delete it again
			deleter().delete(TestUtils.stravaWithFullAccess(), createdComment);
			fail("Created a comment on a private activity, but don't have view_private scope in token"); //$NON-NLS-1$
		});
	}

	@Override
	@Test
	public void testPrivateWithViewPrivateScope() throws Exception {
		// Skip this test
		assumeTrue(false);

	}

	@Override
	protected void validate(StravaComment object) {
		CommentDataUtils.validateComment(object);

	}

}
